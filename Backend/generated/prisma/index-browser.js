
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BusScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  bus_number: 'bus_number',
  capacity: 'capacity',
  route_id: 'route_id',
  driver_id: 'driver_id',
  conductor_id: 'conductor_id',
  status: 'status',
  current_location: 'current_location',
  fuel_level: 'fuel_level',
  last_maintenance: 'last_maintenance',
  insurance_expiry: 'insurance_expiry',
  permit_expiry: 'permit_expiry',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ConductorScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  phone: 'phone',
  experience_years: 'experience_years',
  address: 'address',
  emergency_contact: 'emergency_contact',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  phone: 'phone',
  license_number: 'license_number',
  license_expiry: 'license_expiry',
  experience_years: 'experience_years',
  address: 'address',
  emergency_contact: 'emergency_contact',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  bus_id: 'bus_id',
  package_number: 'package_number',
  sender_name: 'sender_name',
  sender_phone: 'sender_phone',
  receiver_name: 'receiver_name',
  receiver_phone: 'receiver_phone',
  from_stop: 'from_stop',
  to_stop: 'to_stop',
  description: 'description',
  weight: 'weight',
  fare: 'fare',
  status: 'status',
  booked_at: 'booked_at',
  delivered_at: 'delivered_at'
};

exports.Prisma.DailyReportScalarFieldEnum = {
  id: 'id',
  bus_id: 'bus_id',
  report_date: 'report_date',
  total_passengers: 'total_passengers',
  total_revenue: 'total_revenue',
  total_packages: 'total_packages',
  package_revenue: 'package_revenue',
  fuel_cost: 'fuel_cost',
  maintenance_cost: 'maintenance_cost',
  created_at: 'created_at'
};

exports.Prisma.RouteScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  code: 'code',
  distance: 'distance',
  base_fare: 'base_fare',
  per_km_rate: 'per_km_rate',
  stops: 'stops',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  bus_id: 'bus_id',
  ticket_number: 'ticket_number',
  passenger_name: 'passenger_name',
  passenger_phone: 'passenger_phone',
  from_stop: 'from_stop',
  to_stop: 'to_stop',
  passenger_type: 'passenger_type',
  fare: 'fare',
  issue_time: 'issue_time',
  journey_date: 'journey_date',
  status: 'status'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  role: 'role',
  company_name: 'company_name',
  is_verified: 'is_verified',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OTPScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  otp_code: 'otp_code',
  otp_type: 'otp_type',
  expires_at: 'expires_at',
  is_used: 'is_used',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.BusOrderByRelevanceFieldEnum = {
  bus_number: 'bus_number',
  current_location: 'current_location'
};

exports.Prisma.ConductorOrderByRelevanceFieldEnum = {
  name: 'name',
  phone: 'phone',
  address: 'address',
  emergency_contact: 'emergency_contact'
};

exports.Prisma.DriverOrderByRelevanceFieldEnum = {
  name: 'name',
  phone: 'phone',
  license_number: 'license_number',
  address: 'address',
  emergency_contact: 'emergency_contact'
};

exports.Prisma.PackageOrderByRelevanceFieldEnum = {
  package_number: 'package_number',
  sender_name: 'sender_name',
  sender_phone: 'sender_phone',
  receiver_name: 'receiver_name',
  receiver_phone: 'receiver_phone',
  from_stop: 'from_stop',
  to_stop: 'to_stop',
  description: 'description'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.RouteOrderByRelevanceFieldEnum = {
  name: 'name',
  code: 'code'
};

exports.Prisma.TicketOrderByRelevanceFieldEnum = {
  ticket_number: 'ticket_number',
  passenger_name: 'passenger_name',
  passenger_phone: 'passenger_phone',
  from_stop: 'from_stop',
  to_stop: 'to_stop'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  company_name: 'company_name'
};

exports.Prisma.OTPOrderByRelevanceFieldEnum = {
  otp_code: 'otp_code'
};
exports.BusStatus = exports.$Enums.BusStatus = {
  running: 'running',
  stopped: 'stopped',
  maintenance: 'maintenance'
};

exports.PackageStatus = exports.$Enums.PackageStatus = {
  booked: 'booked',
  in_transit: 'in_transit',
  delivered: 'delivered',
  cancelled: 'cancelled'
};

exports.PassengerType = exports.$Enums.PassengerType = {
  general: 'general',
  student: 'student',
  senior: 'senior',
  disabled: 'disabled'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  booked: 'booked',
  used: 'used',
  cancelled: 'cancelled'
};

exports.Role = exports.$Enums.Role = {
  owner: 'owner',
  admin: 'admin',
  conductor: 'conductor',
  driver: 'driver'
};

exports.OTPType = exports.$Enums.OTPType = {
  REGISTRATION: 'REGISTRATION',
  LOGIN: 'LOGIN',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

exports.Prisma.ModelName = {
  Bus: 'Bus',
  Conductor: 'Conductor',
  Driver: 'Driver',
  Package: 'Package',
  DailyReport: 'DailyReport',
  Route: 'Route',
  Ticket: 'Ticket',
  User: 'User',
  OTP: 'OTP'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
