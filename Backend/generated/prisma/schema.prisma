// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bus {
  id               Int       @id @default(autoincrement())
  user_id          Int
  bus_number       String    @unique @db.VarChar(20)
  capacity         Int       @default(45)
  route_id         Int?
  driver_id        Int?
  conductor_id     Int?
  status           BusStatus @default(stopped)
  current_location String?   @db.VarChar(200)
  fuel_level       Decimal?  @default(0) @db.Decimal(5, 2)
  last_maintenance DateTime?
  insurance_expiry DateTime?
  permit_expiry    DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  route        Route?        @relation(fields: [route_id], references: [id], onDelete: SetNull)
  driver       Driver?       @relation(fields: [driver_id], references: [id], onDelete: SetNull)
  conductor    Conductor?    @relation(fields: [conductor_id], references: [id], onDelete: SetNull)
  tickets      Ticket[]
  packages     Package[]
  dailyReports DailyReport[]
}

enum BusStatus {
  running
  stopped
  maintenance
}

model Conductor {
  id                Int      @id @default(autoincrement())
  user_id           Int
  name              String   @db.VarChar(100)
  phone             String   @db.VarChar(15)
  experience_years  Int      @default(0)
  address           String?  @db.Text
  emergency_contact String?  @db.VarChar(15)
  active            Boolean  @default(true)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  buses Bus[]
}

model Driver {
  id                Int       @id @default(autoincrement())
  user_id           Int
  name              String    @db.VarChar(100)
  phone             String    @db.VarChar(15)
  license_number    String    @db.VarChar(50)
  license_expiry    DateTime?
  experience_years  Int       @default(0)
  address           String?   @db.Text
  emergency_contact String?   @db.VarChar(15)
  active            Boolean   @default(true)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relation to User model
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  buses Bus[]
}

model Package {
  id             Int           @id @default(autoincrement())
  bus_id         Int
  package_number String        @unique @db.VarChar(50)
  sender_name    String        @db.VarChar(100)
  sender_phone   String        @db.VarChar(15)
  receiver_name  String        @db.VarChar(100)
  receiver_phone String        @db.VarChar(15)
  from_stop      String        @db.VarChar(100)
  to_stop        String        @db.VarChar(100)
  description    String?       @db.Text
  weight         Decimal?      @db.Decimal(8, 2)
  fare           Decimal       @db.Decimal(8, 2)
  status         PackageStatus @default(booked)
  booked_at      DateTime      @default(now())
  delivered_at   DateTime?

  // Relations
  bus Bus @relation(fields: [bus_id], references: [id], onDelete: Cascade)
}

enum PackageStatus {
  booked
  in_transit
  delivered
  cancelled
}

model DailyReport {
  id               Int      @id @default(autoincrement())
  bus_id           Int
  report_date      DateTime
  total_passengers Int      @default(0)
  total_revenue    Decimal  @default(0) @db.Decimal(10, 2)
  total_packages   Int      @default(0)
  package_revenue  Decimal  @default(0) @db.Decimal(10, 2)
  fuel_cost        Decimal  @default(0) @db.Decimal(8, 2)
  maintenance_cost Decimal  @default(0) @db.Decimal(8, 2)
  created_at       DateTime @default(now())

  // Relations
  bus Bus @relation(fields: [bus_id], references: [id], onDelete: Cascade)

  @@unique([bus_id, report_date], name: "unique_bus_date")
}

model Route {
  id          Int      @id @default(autoincrement())
  user_id     Int
  name        String   @db.VarChar(100)
  code        String   @unique @db.VarChar(20)
  distance    Decimal  @db.Decimal(8, 2)
  base_fare   Decimal  @db.Decimal(8, 2)
  per_km_rate Decimal  @db.Decimal(8, 2)
  stops       Json
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  buses Bus[]
}

model Ticket {
  id              Int           @id @default(autoincrement())
  bus_id          Int
  ticket_number   String        @unique @db.VarChar(50)
  passenger_name  String?       @db.VarChar(100)
  passenger_phone String?       @db.VarChar(15)
  from_stop       String        @db.VarChar(100)
  to_stop         String        @db.VarChar(100)
  passenger_type  PassengerType @default(general)
  fare            Decimal       @db.Decimal(8, 2)
  issue_time      DateTime      @default(now())
  journey_date    DateTime
  status          TicketStatus  @default(booked)

  // Relations
  bus Bus @relation(fields: [bus_id], references: [id], onDelete: Cascade)
}

enum PassengerType {
  general
  student
  senior
  disabled
}

enum TicketStatus {
  booked
  used
  cancelled
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String?  @unique // Optional for phone-based login
  password     String? // Optional if using OTP only
  phone        String   @unique // Required for OTP login
  role         Role     @default(owner)
  company_name String?
  is_verified  Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  drivers    Driver[]
  routes     Route[]
  conductors Conductor[]
  buses      Bus[]
  otps       OTP[]
}

model OTP {
  id         Int      @id @default(autoincrement())
  user_id    Int
  otp_code   String
  otp_type   OTPType
  expires_at DateTime
  is_used    Boolean  @default(false)
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum OTPType {
  REGISTRATION
  LOGIN
  PASSWORD_RESET
}

enum Role {
  owner
  admin
  conductor
  driver
}
